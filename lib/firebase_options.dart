// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get android => FirebaseOptions(
    apiKey: _getEnvVar('ANDROID_API_KEY'),
    appId: _getEnvVar('ANDROID_APP_ID'),
    messagingSenderId: _getEnvVar('ANDROID_MESSAGING_SENDER_ID'),
    projectId: _getEnvVar('ANDROID_PROJECT_ID'),
    storageBucket: _getEnvVar('ANDROID_STORAGE_BUCKET'),
  );

  static FirebaseOptions get ios => FirebaseOptions(
    apiKey: _getEnvVar('IOS_API_KEY'),
    appId: _getEnvVar('IOS_APP_ID'),
    messagingSenderId: _getEnvVar('IOS_MESSAGING_SENDER_ID'),
    projectId: _getEnvVar('IOS_PROJECT_ID'),
    storageBucket: _getEnvVar('IOS_STORAGE_BUCKET'),
    iosBundleId: _getEnvVar('IOS_BUNDLE_ID'),
  );

  static String _getEnvVar(String key) {
    try {
      return dotenv.env[key] ?? '';
    } catch (e) {
      // dotenv not initialized yet, return empty string
      return '';
    }
  }
}
